#!/usr/bin/env python
import numpy, csv, argparse
import matplotlib.pyplot as plt
import itertools

parser = argparse.ArgumentParser(description='Analyse and plot from a pump-measure results file.')
parser.add_argument(
    'input_file',
    help='The path to the input .csv, as generated by pump-measure.py')
args = parser.parse_args()

print 'Analysing {}'.format(args.input_file)
df = open(args.input_file)
dr = csv.DictReader(df)
d = list(dr)
# Parse data into JSONable structure
measurements = (('F_d', 'forward'), ('R_d', 'reverse'))
data = {
    (float(r['revs']), float(r['rate'])): {
        name: numpy.array(
            [
                float(r[k])
                for k in r.keys()
                if (k[-3:] == suffix)
            ])
        for suffix, name in measurements
    }
    for r in d
}

print data

all_revs = sorted(set([rev for rev, _ in data.iterkeys()]))
all_rates = sorted(set([rate for _, rate in data.iterkeys()]))

measurement_names = [name for _, name in measurements]
figs = {}
axiess = {}
for name in measurement_names:
    figs[name], axiess[name] = plt.subplots(nrows=len(all_revs), ncols=len(all_rates))
    figs[name].suptitle(name)
    for (i, revs), (j, rate) in itertools.product(enumerate(all_revs, 0), enumerate(all_rates, 0)):
        print 'looking for ({}, {})'.format(revs, rate)
        if (revs, rate) in data:
            test_results = data[revs, rate]
            title = 'revs = {}, rate = {}'.format(str(revs), str(rate), name)
            print "plotting " + title
            axis = axiess[name][i][j]
            axis.hist(test_results[name], normed=True)
            axis.set_title(title)
plt.show()